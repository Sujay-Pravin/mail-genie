{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sujay\\\\OneDrive\\\\Desktop\\\\WEB-APPS\\\\vertex-mail-gen\\\\frontend\\\\src\\\\components\\\\CertificatePreview.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CertificatePreview = ({\n  templateFile,\n  previewName,\n  xCoord,\n  endXCoord,\n  yCoord,\n  fontSize,\n  font\n}) => {\n  _s();\n  const [previewUrl, setPreviewUrl] = useState('');\n  useEffect(() => {\n    const generatePreview = async () => {\n      try {\n        const formData = new FormData();\n        formData.append('templateFile', templateFile);\n        formData.append('previewName', previewName);\n        formData.append('xCoord', xCoord);\n        formData.append('endXCoord', endXCoord);\n        formData.append('yCoord', yCoord);\n        formData.append('fontSize', fontSize);\n        formData.append('font', font);\n        formData.append('isPreview', 'true');\n        const response = await fetch('http://localhost:5000/api/sendCertificates', {\n          method: 'POST',\n          body: formData\n        });\n        if (response.ok) {\n          const data = await response.json();\n          // Convert hex string back to bytes and create blob URL\n          const bytes = new Uint8Array(data.preview.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n          const blob = new Blob([bytes], {\n            type: 'image/jpeg'\n          });\n          const url = URL.createObjectURL(blob);\n          setPreviewUrl(prev => {\n            if (prev) URL.revokeObjectURL(prev);\n            return url;\n          });\n        }\n      } catch (error) {\n        console.error('Preview generation failed:', error);\n      }\n    };\n    if (templateFile) {\n      generatePreview();\n    }\n    return () => {\n      if (previewUrl) {\n        URL.revokeObjectURL(previewUrl);\n      }\n    };\n  }, [templateFile, previewName, xCoord, endXCoord, yCoord, fontSize, font]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"preview-image-container\",\n    children: previewUrl ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: previewUrl,\n      alt: \"Certificate Preview\",\n      className: \"preview-image\",\n      style: {\n        maxWidth: '100%',\n        height: 'auto'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"preview-placeholder\",\n      children: \"Loading preview...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(CertificatePreview, \"BxkquVF5utYHWsVi8CfI1+TsFPI=\");\n_c = CertificatePreview;\nexport default CertificatePreview;\nvar _c;\n$RefreshReg$(_c, \"CertificatePreview\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","CertificatePreview","templateFile","previewName","xCoord","endXCoord","yCoord","fontSize","font","_s","previewUrl","setPreviewUrl","generatePreview","formData","FormData","append","response","fetch","method","body","ok","data","json","bytes","Uint8Array","preview","match","map","byte","parseInt","blob","Blob","type","url","URL","createObjectURL","prev","revokeObjectURL","error","console","className","children","src","alt","style","maxWidth","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sujay/OneDrive/Desktop/WEB-APPS/vertex-mail-gen/frontend/src/components/CertificatePreview.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst CertificatePreview = ({ \r\n  templateFile, \r\n  previewName, \r\n  xCoord, \r\n  endXCoord,\r\n  yCoord, \r\n  fontSize,\r\n  font \r\n}) => {\r\n  const [previewUrl, setPreviewUrl] = useState('');\r\n\r\n  useEffect(() => {\r\n    const generatePreview = async () => {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append('templateFile', templateFile);\r\n        formData.append('previewName', previewName);\r\n        formData.append('xCoord', xCoord);\r\n        formData.append('endXCoord', endXCoord);\r\n        formData.append('yCoord', yCoord);\r\n        formData.append('fontSize', fontSize);\r\n        formData.append('font', font);\r\n        formData.append('isPreview', 'true');\r\n\r\n        const response = await fetch('http://localhost:5000/api/sendCertificates', {\r\n          method: 'POST',\r\n          body: formData,\r\n        });\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          // Convert hex string back to bytes and create blob URL\r\n          const bytes = new Uint8Array(\r\n            data.preview.match(/.{1,2}/g).map(byte => parseInt(byte, 16))\r\n          );\r\n          const blob = new Blob([bytes], { type: 'image/jpeg' });\r\n          const url = URL.createObjectURL(blob);\r\n          setPreviewUrl(prev => {\r\n            if (prev) URL.revokeObjectURL(prev);\r\n            return url;\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error('Preview generation failed:', error);\r\n      }\r\n    };\r\n\r\n    if (templateFile) {\r\n      generatePreview();\r\n    }\r\n\r\n    return () => {\r\n      if (previewUrl) {\r\n        URL.revokeObjectURL(previewUrl);\r\n      }\r\n    };\r\n  }, [templateFile, previewName, xCoord, endXCoord, yCoord, fontSize, font]);\r\n\r\n  return (\r\n    <div className=\"preview-image-container\">\r\n      {previewUrl ? (\r\n        <img \r\n          src={previewUrl} \r\n          alt=\"Certificate Preview\" \r\n          className=\"preview-image\"\r\n          style={{ maxWidth: '100%', height: 'auto' }}\r\n        />\r\n      ) : (\r\n        <div className=\"preview-placeholder\">Loading preview...</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CertificatePreview;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}